{"version":3,"sources":["serviceWorker.js","index.js","App.js","Test.js","Result.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","className","href","Test","defaultCode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","filter","require","default","map","distinct","first","some","every","props","useState","numberOfElements","setNumberOfElements","code","setCode","undefined","executionResult","setExecutionResult","time","setTime","callback","console","debug","array","i","push","date1","Date","result","eval","date2","duration","getTime","class","type","value","onChange","event","target","rows","onClick","timeSpent","Result"],"mappings":"mLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,mBCFD,WAIX,OACI,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,8BACX,yBAAKA,UAAU,qBACX,8EACoD,uBAAGC,KAAK,wCAAR,cADpD,0GACwN,uBAAGA,KAAK,wCAAR,cADxN,KAGA,kWAIJ,yBAAKD,UAAU,kBACX,yBAAKA,UAAU,qBACX,kBAACE,EAAA,EAAD,CAAMC,YAhBb,mEAkBG,yBAAKH,UAAU,qBACX,kBAACE,EAAA,EAAD,CAAMC,YAlBZ,gFDAF,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,8sBGhIfC,OAASC,oBAAQ,IAAuCC,QACxDC,IAAMF,oBAAQ,IAAoCC,QAClDE,SAAWH,oBAAQ,IAAyCC,QAC5DG,MAAQJ,oBAAQ,IAAsCC,QACtDI,KAAOL,oBAAQ,IAAqCC,QACpDK,MAAQN,oBAAQ,IAAsCC,QAI3C,SAASZ,KAAKkB,OAAQ,IAAD,UACgBC,oDAAS,KADzB,kKACzBC,iBADyB,cACPC,oBADO,yBAERF,oDAASD,MAAMjB,aAFP,mKAEzBqB,KAFyB,cAEnBC,QAFmB,yBAGcJ,yDAASK,GAHvB,mKAGzBC,gBAHyB,cAGRC,mBAHQ,yBAIRP,qDAAU,GAJF,mKAIzBQ,KAJyB,cAInBC,QAJmB,cAM1BC,SAAW,SAAXA,WACFC,QAAQC,MAAM,wBAEd,IADA,IAAMC,MAAQ,GACLC,EAAI,EAAGA,GAAKb,iBAAkBa,IACnCD,MAAME,KAAN,UAAcD,IAElBH,QAAQC,MAAR,mDAA0DX,iBAA1D,gBAEAU,QAAQC,MAAM,8BACd,IAAMI,MAAQ,IAAIC,KACZC,OAASC,KAAKhB,MACpBI,mBAAmBW,QACnB,IAAME,MAAQ,IAAIH,KACZI,SAAWD,MAAME,UAAYN,MAAMM,UACzCb,QAAQY,UAERV,QAAQC,MAAR,uCAA8CM,OAA9C,mBAA+DG,YAGnE,OACI,sEACI,kEAAKE,MAAM,SACP,oEAAOA,MAAM,SAAb,sBACA,kEAAKA,MAAM,WACP,oEAAOC,KAAK,OAAO7C,UAAU,QAAQ8C,MAAOxB,iBAAkByB,SAAU,SAAAC,GAAK,OAAIzB,oBAAoByB,EAAMC,OAAOH,YAG1H,kEAAKF,MAAM,SACP,oEAAOA,MAAM,SAAb,QACA,kEAAKA,MAAM,WACP,uEAAU5C,UAAU,WAAWkD,KAAK,IAAIJ,MAAOtB,KAAMuB,SAAU,SAAAC,GAAK,OAAIvB,QAAQuB,EAAMC,OAAOH,YAGrG,kEAAKF,MAAM,WACP,qEAAQ5C,UAAU,oBAAoBmD,QAASpB,UAA/C,QAEFJ,iBAAmB,2DAAC,uCAAD,CAAQA,gBAAiBA,gBAAiByB,UAAWvB,U,+BCxDtF,sDAEe,SAASwB,EAAOjC,GAC3B,OACI,2BAAOpB,UAAU,sBACb,+BACI,4BACI,gDACA,4CAGR,+BACI,4BACI,sCAAQoB,EAAMO,kBACd,4BAAKP,EAAMgC,UAAX,gJ","file":"static/js/main.762a7d60.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport Test from './Test';\n\nexport default function App() {\n    const left = 'array\\n    .map(s => parseInt(s))\\n    .some(n => n%2 === 0);';\n    const right = 'array.pipe(\\n    map(s => parseInt(s)),\\n    some(n => n%2 === 0)\\n);'\n\n    return (\n        <div className=\"tile is-ancestor\">\n            <div className=\"tile is-parent is-vertical\">\n                <div className=\"tile is-child box\">\n                    <p>\n                        This application was created to quickly compare <a href=\"https://github.com/gossie/array-pipe\">array-pipe</a> implementations with conventional implementations. Check out the documentation to find out more about <a href=\"https://github.com/gossie/array-pipe\">array-pipe</a>.\n                    </p>\n                    <p>\n                        When you click \"Run\" an array with \"Number of elements\" many entries will be created. The variable name will just be array. The array consists of string encoded numbers in ascending order, beginning with 1 (something like this: ['1', '2', '3', ..., '1000000']). That array can then be used in your code in the codebox.\n                    </p>\n                </div>\n                <div className=\"tile is-parent\">\n                    <div className=\"tile is-child box\">\n                        <Test defaultCode={left} />\n                    </div>\n                    <div className=\"tile is-child box\">\n                        <Test defaultCode={right} />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport '@gossie/array-pipe';\nimport Result from './Result';\n\n// This only exists so the code in the eval can reference the operators.\nvar filter = require('@gossie/array-pipe/operators/filter').default;\nvar map = require('@gossie/array-pipe/operators/map').default;\nvar distinct = require('@gossie/array-pipe/operators/distinct').default;\nvar first = require('@gossie/array-pipe/operators/first').default;\nvar some = require('@gossie/array-pipe/operators/some').default;\nvar every = require('@gossie/array-pipe/operators/every').default;\n\n\n\nexport default function Test(props) {\n    const [numberOfElements, setNumberOfElements] = useState(1000000);\n    const [code, setCode] = useState(props.defaultCode);\n    const [executionResult, setExecutionResult] = useState(undefined);\n    const [time, setTime] = useState(-1);\n\n    const callback = () => {\n        console.debug('start building array');\n        const array = [];\n        for (let i = 1; i <= numberOfElements; i++) {\n            array.push(`${i}`);\n        }\n        console.debug(`array created with the numbers from 1 to ${numberOfElements} as strings`);\n        \n        console.debug('start evaluating your code');\n        const date1 = new Date();\n        const result = eval(code);\n        setExecutionResult(result);\n        const date2 = new Date();\n        const duration = date2.getTime() - date1.getTime()\n        setTime(duration);\n\n        console.debug(`finished evaluating. result: ${result}, time: ${duration}`);\n    };\n\n    return (\n        <div>\n            <div class=\"field\">\n                <label class=\"label\">Number of elements</label>\n                <div class=\"control\">\n                    <input type=\"text\" className=\"input\" value={numberOfElements} onChange={event => setNumberOfElements(event.target.value)} />\n                </div>\n            </div>\n            <div class=\"field\">\n                <label class=\"label\">Code</label>\n                <div class=\"control\">\n                    <textarea className=\"textarea\" rows=\"7\" value={code} onChange={event => setCode(event.target.value)} />\n                </div>\n            </div>\n            <div class=\"control\">\n                <button className=\"button is-primary\" onClick={callback}>Run</button>\n            </div>\n            { executionResult && <Result executionResult={executionResult} timeSpent={time} />}\n        </div>\n    );\n}\n","import React from 'react';\n\nexport default function Result(props) {\n    return (\n        <table className=\"table is-fullwidth\">\n            <thead>\n                <tr>\n                    <th>Execution result</th>\n                    <th>Time spent</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>{`${props.executionResult}`}</td>\n                    <td>{props.timeSpent} ms (This is just the time that was needed to execute the above code. The rest of the time you've waited was used to create the array.)</td>\n                </tr>\n            </tbody>\n        </table>\n    );\n}\n"],"sourceRoot":""}