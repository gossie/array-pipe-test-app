{"version":3,"sources":["serviceWorker.js","index.js","App.js","Test.js","Result.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","Test","defaultCode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","filter","require","default","map","distinct","first","some","every","props","useState","numberOfElements","setNumberOfElements","code","setCode","undefined","executionResult","setExecutionResult","time","setTime","callback","console","debug","array","i","push","date1","Date","result","eval","date2","duration","getTime","className","value","onChange","event","target","cols","rows","onClick","timeSpent","Result"],"mappings":"wMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,mBCFD,WAIX,OACI,6BACI,8BACI,kBAACC,EAAA,EAAD,CAAMC,YANL,+DAQL,8BACI,kBAACD,EAAA,EAAD,CAAMC,YARJ,0EDAF,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,03BG/HfC,OAASC,oBAAQ,IAAuCC,QACxDC,IAAMF,oBAAQ,IAAoCC,QAClDE,SAAWH,oBAAQ,IAAyCC,QAC5DG,MAAQJ,oBAAQ,IAAsCC,QACtDI,KAAOL,oBAAQ,IAAqCC,QACpDK,MAAQN,oBAAQ,IAAsCC,QAI3C,SAASZ,KAAKkB,OAAQ,IAAD,UACgBC,oDAAS,KADzB,kKACzBC,iBADyB,cACPC,oBADO,yBAERF,oDAASD,MAAMjB,aAFP,mKAEzBqB,KAFyB,cAEnBC,QAFmB,yBAGcJ,yDAASK,GAHvB,mKAGzBC,gBAHyB,cAGRC,mBAHQ,yBAIRP,qDAAU,GAJF,mKAIzBQ,KAJyB,cAInBC,QAJmB,cAM1BC,SAAW,SAAXA,WACFC,QAAQC,MAAM,wBAEd,IADA,IAAMC,MAAQ,GACLC,EAAI,EAAGA,GAAKb,iBAAkBa,IACnCD,MAAME,KAAN,UAAcD,IAElBH,QAAQC,MAAR,mDAA0DX,iBAA1D,gBAEAU,QAAQC,MAAM,8BACd,IAAMI,MAAQ,IAAIC,KACZC,OAASC,KAAKhB,MACpBI,mBAAmBW,QACnB,IAAME,MAAQ,IAAIH,KACZI,SAAWD,MAAME,UAAYN,MAAMM,UACzCb,QAAQY,UAERV,QAAQC,MAAR,uCAA8CM,OAA9C,mBAA+DG,YAGnE,OACI,mEAAME,UAAU,kBACZ,wEACI,wEACI,qEACI,4FACA,qEAAI,oEAAOC,MAAOvB,iBAAkBwB,SAAU,SAAAC,GAAK,OAAIxB,oBAAoBwB,EAAMC,OAAOH,YAE5F,qEACI,8EACA,qEAAI,uEAAUI,KAAK,KAAKC,KAAK,KAAKL,MAAOrB,KAAMsB,SAAU,SAAAC,GAAK,OAAItB,QAAQsB,EAAMC,OAAOH,cAInG,qEAAQM,QAASpB,UAAjB,OACEJ,iBAAmB,2DAAC,uCAAD,CAAQA,gBAAiBA,gBAAiByB,UAAWvB,U,+BCvDtF,sDAEe,SAASwB,EAAOjC,GAC3B,OACI,+BACI,+BACI,4BACI,iDACA,sCAAQA,EAAMO,mBAElB,4BACI,2CACA,4BAAKP,EAAMgC,UAAX,gJ","file":"static/js/main.2463691c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport Test from './Test';\n\nexport default function App() {\n    const left = 'array\\n  .map(s => parseInt(s))\\n  .some(n => n%2 === 0);';\n    const right = 'array.pipe(\\n  map(s => parseInt(s)),\\n  some(n => n%2 === 0)\\n);'\n\n    return (\n        <div>\n            <span>\n                <Test defaultCode={left} />\n            </span>\n            <span>\n                <Test defaultCode={right} />\n            </span>\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport './Test.css';\nimport '@gossie/array-pipe';\nimport Result from './Result';\n\n// This only exists so the code in the eval can reference the operators.\nvar filter = require('@gossie/array-pipe/operators/filter').default;\nvar map = require('@gossie/array-pipe/operators/map').default;\nvar distinct = require('@gossie/array-pipe/operators/distinct').default;\nvar first = require('@gossie/array-pipe/operators/first').default;\nvar some = require('@gossie/array-pipe/operators/some').default;\nvar every = require('@gossie/array-pipe/operators/every').default;\n\n\n\nexport default function Test(props) {\n    const [numberOfElements, setNumberOfElements] = useState(1000000);\n    const [code, setCode] = useState(props.defaultCode);\n    const [executionResult, setExecutionResult] = useState(undefined);\n    const [time, setTime] = useState(-1);\n\n    const callback = () => {\n        console.debug('start building array');\n        const array = [];\n        for (let i = 1; i <= numberOfElements; i++) {\n            array.push(`${i}`);\n        }\n        console.debug(`array created with the numbers from 1 to ${numberOfElements} as strings`);\n        \n        console.debug('start evaluating your code');\n        const date1 = new Date();\n        const result = eval(code);\n        setExecutionResult(result);\n        const date2 = new Date();\n        const duration = date2.getTime() - date1.getTime()\n        setTime(duration);\n\n        console.debug(`finished evaluating. result: ${result}, time: ${duration}`);\n    };\n\n    return (\n        <span className=\"test-container\">\n            <table>\n                <tbody>\n                    <tr>\n                        <td>Number of elements:</td>\n                        <td><input value={numberOfElements} onChange={event => setNumberOfElements(event.target.value)} /></td>\n                    </tr>\n                    <tr>\n                        <td>Code:</td>\n                        <td><textarea cols=\"50\" rows=\"10\" value={code} onChange={event => setCode(event.target.value)} /></td>\n                    </tr>\n                </tbody>\n            </table>\n            <button onClick={callback}>Run</button>\n            { executionResult && <Result executionResult={executionResult} timeSpent={time} />}\n        </span>\n    );\n}\n","import React from 'react';\n\nexport default function Result(props) {\n    return (\n        <table>\n            <tbody>\n                <tr>\n                    <td>Execution result:</td>\n                    <td>{`${props.executionResult}`}</td>\n                </tr>\n                <tr>\n                    <td>Time spent:</td>\n                    <td>{props.timeSpent} ms (This is just the time that was needed to execute the above code. The rest of the time you've waited was used to create the array.)</td>\n                </tr>\n            </tbody>\n        </table>\n    );\n}\n"],"sourceRoot":""}